from docling.document_converter import DocumentConverter
from pathlib import Path
import tempfile
import os
import argparse
from typing import Optional
import re
from datetime import datetime


def write_md_atomic(path: str, content: str) -> None:
    """Write content to `path` atomically (write to temp file then rename).

    Ensures partial writes won't leave corrupt or partial files if the process is
    interrupted.
    """
    p = Path(path)
    p.parent.mkdir(parents=True, exist_ok=True)
    # Create temp file in same directory so os.replace is atomic on the same fs
    with tempfile.NamedTemporaryFile("w", delete=False, dir=str(p.parent), encoding="utf-8") as tf:
        tf.write(content)
        tmpname = tf.name
    os.replace(tmpname, str(p))


def main(output: Optional[str] = None) -> None:  # pyright: ignore[reportUnknownParameterType]
    converter = DocumentConverter()
    # Keep the same default source for compatibility, but allow overriding via CLI
    # Default to the project's sample PDF in documents/result when no source is provided
    project_root = Path(__file__).resolve().parents[2]
    default_pdf = project_root / "documents" / "result" / "Permendiktisaintek_Nomor_39_Tahun_2025.pdf"
    fallback_pdf = project_root / "documents" / "source" / "Permendiktisaintek_Nomor_39_Tahun_2025.pdf"
    if default_pdf.exists():
        source = str(default_pdf)
    elif fallback_pdf.exists():
        source = str(fallback_pdf)
    else:
        # Last-resort default (online example)
        source = "https://arxiv.org/pdf/2408.09869"
    doc = converter.convert(source).document
    md = doc.export_to_markdown()

    if output:
        out_path = output
        out_path = out_path if out_path.lower().endswith(".md") else f"{out_path}.md"
        write_md_atomic(out_path, md)
        print(f"Wrote markdown to {out_path}")
    else:
        # Default behaviour: print to stdout
        print(md)


def _slugify(s: str) -> str:
    s = s.lower()
    s = re.sub(r"https?://", "", s)
    s = re.sub(r"[^a-z0-9]+", "-", s)
    s = re.sub(r"-+", "-", s).strip("-")
    return s or "doc"


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert a document and export to Markdown (docling).")
    parser.add_argument("--output", "-o", help="Path to write markdown (.md). If provided, this file is used.")
    parser.add_argument("--output-dir", "-d", help="Directory to write output files. Defaults to 'documents/result'.", default=str(Path.cwd() / "documents" / "result"))
    parser.add_argument("--name", "-n", help="Filename (without extension). If omitted a name is autogenerated from the source or timestamp.")
    parser.add_argument("--source", "-s", help="Source file path or URL to convert. If omitted a default example URL is used.")
    args = parser.parse_args()

    # Determine source if provided
    src = args.source if args.source else None

    # If --output was provided, pass it directly to main
    if args.output:
        # Ensure parent dir exists
        p = Path(args.output)
        p.parent.mkdir(parents=True, exist_ok=True)
        main(str(p))
    else:
        out_dir = Path(args.output_dir)
        out_dir.mkdir(parents=True, exist_ok=True)

        # Choose filename
        if args.name:
            name = args.name
        else:
            if src:
                name = _slugify(src)
            else:
                name = datetime.utcnow().strftime("doc-%Y%m%dT%H%M%SZ") # pyright: ignore[reportDeprecated]

        filename = f"{name}.md"
        out_path = out_dir / filename

        # Run conversion using provided source if any
        # We call converter directly here so main() needs to be refactored to accept source; to keep changes minimal,
        # we'll replicate the core conversion logic using DocumentConverter here.
        converter = DocumentConverter()
        # Default source when none provided: point at the result PDF requested by user
        project_root = Path(__file__).resolve().parents[2]
        default_pdf = project_root / "documents" / "result" / "Permendiktisaintek_Nomor_39_Tahun_2025.pdf"
        fallback_pdf = project_root / "documents" / "source" / "Permendiktisaintek_Nomor_39_Tahun_2025.pdf"
        if src:
            source_to_use = src
        elif default_pdf.exists():
            source_to_use = str(default_pdf)
        elif fallback_pdf.exists():
            source_to_use = str(fallback_pdf)
        else:
            source_to_use = "https://arxiv.org/pdf/2408.09869"
        doc = converter.convert(source_to_use).document
        md = doc.export_to_markdown()

        write_md_atomic(str(out_path), md)
        print(f"Wrote markdown to {out_path}")
